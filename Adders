// Half Adder implementation using Verilog
module half_adder(
   input x, y,
   output s, c
);

// continous Assignment
assign s = x ^ y;   // x xor y
assign c = x & y;

// structural
xor sum (s, x, y);
and carry (c, x, y);

endmodule

// Full Adder implementation using Verilog

module full_adder(
  input x, y, c_in,
  output s, c_out
);

wire s0, c0, c1;
half_adder HA0 (
    .x(x),
    .y(y),
    .s(s0),
    .c(c0)
);
half_adder HA1(
    .x(s0),
    .y(c_in),
    .s(s),
    .c(c1)  
);

assign c_out = c0 | c1;
endmodule

// Ripple Carry adder Implemnetation using FA

module rca_4bit(
   input [3:0] x, y,         // x0, x1, x2, x3
   input cin, 
   output [3:0] s,  // s0, s1, s2, s3,
   output cout
);

wire [3:1] c;

full_adder FA0 (
    .x(x[0]),
    .y(y[0]),
    .s(s[0]),
    .cin(cin),
    .cout(c[1])
);
full_adder FA1 (
    .x(x[1]),
    .y(y[1]),
    .s(s[1]),
    .cin(c[1]),
    .cout(c[2])
);
full_adder FA2 (
    .x(x[2]),
    .y(y[2]),
    .s(s[2]),
    .cin(c[2]),
    .cout(c[3])
);
full_adder FA3 (
    .x(x[3]),
    .y(y[3]),
    .s(s[3]),
    .cin(c[3]),
    .cout(cout)
);

endmodule


